// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"net/http"

	"github.com/amandavmanduca/fullcycle-gcr/structs"
	mock "github.com/stretchr/testify/mock"
)

// NewMockHttpClientInterface creates a new instance of MockHttpClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHttpClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHttpClientInterface {
	mock := &MockHttpClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHttpClientInterface is an autogenerated mock type for the HttpClientInterface type
type MockHttpClientInterface struct {
	mock.Mock
}

type MockHttpClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHttpClientInterface) EXPECT() *MockHttpClientInterface_Expecter {
	return &MockHttpClientInterface_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockHttpClientInterface
func (_mock *MockHttpClientInterface) Get(ctx context.Context, path string, queryParams map[string]string) (*http.Response, error) {
	ret := _mock.Called(ctx, path, queryParams)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, map[string]string) (*http.Response, error)); ok {
		return returnFunc(ctx, path, queryParams)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, map[string]string) *http.Response); ok {
		r0 = returnFunc(ctx, path, queryParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = returnFunc(ctx, path, queryParams)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHttpClientInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockHttpClientInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - queryParams map[string]string
func (_e *MockHttpClientInterface_Expecter) Get(ctx interface{}, path interface{}, queryParams interface{}) *MockHttpClientInterface_Get_Call {
	return &MockHttpClientInterface_Get_Call{Call: _e.mock.On("Get", ctx, path, queryParams)}
}

func (_c *MockHttpClientInterface_Get_Call) Run(run func(ctx context.Context, path string, queryParams map[string]string)) *MockHttpClientInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 map[string]string
		if args[2] != nil {
			arg2 = args[2].(map[string]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockHttpClientInterface_Get_Call) Return(response *http.Response, err error) *MockHttpClientInterface_Get_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockHttpClientInterface_Get_Call) RunAndReturn(run func(ctx context.Context, path string, queryParams map[string]string) (*http.Response, error)) *MockHttpClientInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockViaCepApiInterface creates a new instance of MockViaCepApiInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockViaCepApiInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockViaCepApiInterface {
	mock := &MockViaCepApiInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockViaCepApiInterface is an autogenerated mock type for the ViaCepApiInterface type
type MockViaCepApiInterface struct {
	mock.Mock
}

type MockViaCepApiInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockViaCepApiInterface) EXPECT() *MockViaCepApiInterface_Expecter {
	return &MockViaCepApiInterface_Expecter{mock: &_m.Mock}
}

// GetAddress provides a mock function for the type MockViaCepApiInterface
func (_mock *MockViaCepApiInterface) GetAddress(ctx context.Context, cep string) (*structs.AddressResponse, error) {
	ret := _mock.Called(ctx, cep)

	if len(ret) == 0 {
		panic("no return value specified for GetAddress")
	}

	var r0 *structs.AddressResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*structs.AddressResponse, error)); ok {
		return returnFunc(ctx, cep)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *structs.AddressResponse); ok {
		r0 = returnFunc(ctx, cep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structs.AddressResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, cep)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockViaCepApiInterface_GetAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddress'
type MockViaCepApiInterface_GetAddress_Call struct {
	*mock.Call
}

// GetAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - cep string
func (_e *MockViaCepApiInterface_Expecter) GetAddress(ctx interface{}, cep interface{}) *MockViaCepApiInterface_GetAddress_Call {
	return &MockViaCepApiInterface_GetAddress_Call{Call: _e.mock.On("GetAddress", ctx, cep)}
}

func (_c *MockViaCepApiInterface_GetAddress_Call) Run(run func(ctx context.Context, cep string)) *MockViaCepApiInterface_GetAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockViaCepApiInterface_GetAddress_Call) Return(addressResponse *structs.AddressResponse, err error) *MockViaCepApiInterface_GetAddress_Call {
	_c.Call.Return(addressResponse, err)
	return _c
}

func (_c *MockViaCepApiInterface_GetAddress_Call) RunAndReturn(run func(ctx context.Context, cep string) (*structs.AddressResponse, error)) *MockViaCepApiInterface_GetAddress_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWeatherApiInterface creates a new instance of MockWeatherApiInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeatherApiInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeatherApiInterface {
	mock := &MockWeatherApiInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWeatherApiInterface is an autogenerated mock type for the WeatherApiInterface type
type MockWeatherApiInterface struct {
	mock.Mock
}

type MockWeatherApiInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWeatherApiInterface) EXPECT() *MockWeatherApiInterface_Expecter {
	return &MockWeatherApiInterface_Expecter{mock: &_m.Mock}
}

// GetWeather provides a mock function for the type MockWeatherApiInterface
func (_mock *MockWeatherApiInterface) GetWeather(ctx context.Context, city string) (*structs.WeatherResponse, error) {
	ret := _mock.Called(ctx, city)

	if len(ret) == 0 {
		panic("no return value specified for GetWeather")
	}

	var r0 *structs.WeatherResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*structs.WeatherResponse, error)); ok {
		return returnFunc(ctx, city)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *structs.WeatherResponse); ok {
		r0 = returnFunc(ctx, city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structs.WeatherResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, city)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWeatherApiInterface_GetWeather_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWeather'
type MockWeatherApiInterface_GetWeather_Call struct {
	*mock.Call
}

// GetWeather is a helper method to define mock.On call
//   - ctx context.Context
//   - city string
func (_e *MockWeatherApiInterface_Expecter) GetWeather(ctx interface{}, city interface{}) *MockWeatherApiInterface_GetWeather_Call {
	return &MockWeatherApiInterface_GetWeather_Call{Call: _e.mock.On("GetWeather", ctx, city)}
}

func (_c *MockWeatherApiInterface_GetWeather_Call) Run(run func(ctx context.Context, city string)) *MockWeatherApiInterface_GetWeather_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWeatherApiInterface_GetWeather_Call) Return(weatherResponse *structs.WeatherResponse, err error) *MockWeatherApiInterface_GetWeather_Call {
	_c.Call.Return(weatherResponse, err)
	return _c
}

func (_c *MockWeatherApiInterface_GetWeather_Call) RunAndReturn(run func(ctx context.Context, city string) (*structs.WeatherResponse, error)) *MockWeatherApiInterface_GetWeather_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCepServiceInterface creates a new instance of MockCepServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCepServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCepServiceInterface {
	mock := &MockCepServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCepServiceInterface is an autogenerated mock type for the CepServiceInterface type
type MockCepServiceInterface struct {
	mock.Mock
}

type MockCepServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCepServiceInterface) EXPECT() *MockCepServiceInterface_Expecter {
	return &MockCepServiceInterface_Expecter{mock: &_m.Mock}
}

// GetAddress provides a mock function for the type MockCepServiceInterface
func (_mock *MockCepServiceInterface) GetAddress(ctx context.Context, cep string) (*structs.AddressResponse, error) {
	ret := _mock.Called(ctx, cep)

	if len(ret) == 0 {
		panic("no return value specified for GetAddress")
	}

	var r0 *structs.AddressResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*structs.AddressResponse, error)); ok {
		return returnFunc(ctx, cep)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *structs.AddressResponse); ok {
		r0 = returnFunc(ctx, cep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structs.AddressResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, cep)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCepServiceInterface_GetAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddress'
type MockCepServiceInterface_GetAddress_Call struct {
	*mock.Call
}

// GetAddress is a helper method to define mock.On call
//   - ctx context.Context
//   - cep string
func (_e *MockCepServiceInterface_Expecter) GetAddress(ctx interface{}, cep interface{}) *MockCepServiceInterface_GetAddress_Call {
	return &MockCepServiceInterface_GetAddress_Call{Call: _e.mock.On("GetAddress", ctx, cep)}
}

func (_c *MockCepServiceInterface_GetAddress_Call) Run(run func(ctx context.Context, cep string)) *MockCepServiceInterface_GetAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCepServiceInterface_GetAddress_Call) Return(addressResponse *structs.AddressResponse, err error) *MockCepServiceInterface_GetAddress_Call {
	_c.Call.Return(addressResponse, err)
	return _c
}

func (_c *MockCepServiceInterface_GetAddress_Call) RunAndReturn(run func(ctx context.Context, cep string) (*structs.AddressResponse, error)) *MockCepServiceInterface_GetAddress_Call {
	_c.Call.Return(run)
	return _c
}

// GetCepWeatherInfo provides a mock function for the type MockCepServiceInterface
func (_mock *MockCepServiceInterface) GetCepWeatherInfo(ctx context.Context, cep string) (*structs.Weather, error) {
	ret := _mock.Called(ctx, cep)

	if len(ret) == 0 {
		panic("no return value specified for GetCepWeatherInfo")
	}

	var r0 *structs.Weather
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*structs.Weather, error)); ok {
		return returnFunc(ctx, cep)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *structs.Weather); ok {
		r0 = returnFunc(ctx, cep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structs.Weather)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, cep)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCepServiceInterface_GetCepWeatherInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCepWeatherInfo'
type MockCepServiceInterface_GetCepWeatherInfo_Call struct {
	*mock.Call
}

// GetCepWeatherInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - cep string
func (_e *MockCepServiceInterface_Expecter) GetCepWeatherInfo(ctx interface{}, cep interface{}) *MockCepServiceInterface_GetCepWeatherInfo_Call {
	return &MockCepServiceInterface_GetCepWeatherInfo_Call{Call: _e.mock.On("GetCepWeatherInfo", ctx, cep)}
}

func (_c *MockCepServiceInterface_GetCepWeatherInfo_Call) Run(run func(ctx context.Context, cep string)) *MockCepServiceInterface_GetCepWeatherInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCepServiceInterface_GetCepWeatherInfo_Call) Return(weather *structs.Weather, err error) *MockCepServiceInterface_GetCepWeatherInfo_Call {
	_c.Call.Return(weather, err)
	return _c
}

func (_c *MockCepServiceInterface_GetCepWeatherInfo_Call) RunAndReturn(run func(ctx context.Context, cep string) (*structs.Weather, error)) *MockCepServiceInterface_GetCepWeatherInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWeatherServiceInterface creates a new instance of MockWeatherServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeatherServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeatherServiceInterface {
	mock := &MockWeatherServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWeatherServiceInterface is an autogenerated mock type for the WeatherServiceInterface type
type MockWeatherServiceInterface struct {
	mock.Mock
}

type MockWeatherServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWeatherServiceInterface) EXPECT() *MockWeatherServiceInterface_Expecter {
	return &MockWeatherServiceInterface_Expecter{mock: &_m.Mock}
}

// GetWeather provides a mock function for the type MockWeatherServiceInterface
func (_mock *MockWeatherServiceInterface) GetWeather(ctx context.Context, city string) (*structs.Weather, error) {
	ret := _mock.Called(ctx, city)

	if len(ret) == 0 {
		panic("no return value specified for GetWeather")
	}

	var r0 *structs.Weather
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*structs.Weather, error)); ok {
		return returnFunc(ctx, city)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *structs.Weather); ok {
		r0 = returnFunc(ctx, city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structs.Weather)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, city)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWeatherServiceInterface_GetWeather_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWeather'
type MockWeatherServiceInterface_GetWeather_Call struct {
	*mock.Call
}

// GetWeather is a helper method to define mock.On call
//   - ctx context.Context
//   - city string
func (_e *MockWeatherServiceInterface_Expecter) GetWeather(ctx interface{}, city interface{}) *MockWeatherServiceInterface_GetWeather_Call {
	return &MockWeatherServiceInterface_GetWeather_Call{Call: _e.mock.On("GetWeather", ctx, city)}
}

func (_c *MockWeatherServiceInterface_GetWeather_Call) Run(run func(ctx context.Context, city string)) *MockWeatherServiceInterface_GetWeather_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWeatherServiceInterface_GetWeather_Call) Return(weather *structs.Weather, err error) *MockWeatherServiceInterface_GetWeather_Call {
	_c.Call.Return(weather, err)
	return _c
}

func (_c *MockWeatherServiceInterface_GetWeather_Call) RunAndReturn(run func(ctx context.Context, city string) (*structs.Weather, error)) *MockWeatherServiceInterface_GetWeather_Call {
	_c.Call.Return(run)
	return _c
}
